
Experience2_Laura_Sophie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001860  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080019e8  080019e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080019e8  080019e8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080019e8  080019e8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019e8  080019e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019e8  080019e8  000119e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019ec  080019ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080019f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  080019f4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080019f4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000046df  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b26  00000000  00000000  00024713  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f8  00000000  00000000  00025240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000590  00000000  00000000  00025838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ec67  00000000  00000000  00025dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000307c  00000000  00000000  00044a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000acfef  00000000  00000000  00047aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4a9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001894  00000000  00000000  000f4b18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080019d0 	.word	0x080019d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080019d0 	.word	0x080019d0

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db0b      	blt.n	800023a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	4907      	ldr	r1, [pc, #28]	; (8000248 <__NVIC_EnableIRQ+0x38>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e100 	.word	0xe000e100

0800024c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025c:	2b00      	cmp	r3, #0
 800025e:	db0a      	blt.n	8000276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	b2da      	uxtb	r2, r3
 8000264:	490c      	ldr	r1, [pc, #48]	; (8000298 <__NVIC_SetPriority+0x4c>)
 8000266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	0112      	lsls	r2, r2, #4
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	440b      	add	r3, r1
 8000270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000274:	e00a      	b.n	800028c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4908      	ldr	r1, [pc, #32]	; (800029c <__NVIC_SetPriority+0x50>)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	f003 030f 	and.w	r3, r3, #15
 8000282:	3b04      	subs	r3, #4
 8000284:	0112      	lsls	r2, r2, #4
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	440b      	add	r3, r1
 800028a:	761a      	strb	r2, [r3, #24]
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	e000e100 	.word	0xe000e100
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <LL_RCC_LSE_Enable+0x20>)
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <LL_RCC_LSE_Enable+0x20>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000

080002c4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <LL_RCC_LSE_IsReady+0x24>)
 80002ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002ce:	f003 0302 	and.w	r3, r3, #2
 80002d2:	2b02      	cmp	r3, #2
 80002d4:	d101      	bne.n	80002da <LL_RCC_LSE_IsReady+0x16>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e000      	b.n	80002dc <LL_RCC_LSE_IsReady+0x18>
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000

080002ec <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <LL_RCC_LSI_Enable+0x20>)
 80002f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002f6:	4a05      	ldr	r2, [pc, #20]	; (800030c <LL_RCC_LSI_Enable+0x20>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <LL_RCC_MSI_Enable+0x1c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <LL_RCC_MSI_Enable+0x1c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <LL_RCC_MSI_IsReady+0x20>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f003 0302 	and.w	r3, r3, #2
 800033c:	2b02      	cmp	r3, #2
 800033e:	d101      	bne.n	8000344 <LL_RCC_MSI_IsReady+0x14>
 8000340:	2301      	movs	r3, #1
 8000342:	e000      	b.n	8000346 <LL_RCC_MSI_IsReady+0x16>
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6013      	str	r3, [r2, #0]
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000

08000374 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000

08000394 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <LL_RCC_MSI_SetRange+0x24>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003a4:	4904      	ldr	r1, [pc, #16]	; (80003b8 <LL_RCC_MSI_SetRange+0x24>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	600b      	str	r3, [r1, #0]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000

080003bc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	021b      	lsls	r3, r3, #8
 80003d0:	4904      	ldr	r1, [pc, #16]	; (80003e4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80003d2:	4313      	orrs	r3, r2
 80003d4:	604b      	str	r3, [r1, #4]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_RCC_SetSysClkSource+0x24>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	f023 0203 	bic.w	r2, r3, #3
 80003f8:	4904      	ldr	r1, [pc, #16]	; (800040c <LL_RCC_SetSysClkSource+0x24>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	608b      	str	r3, [r1, #8]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <LL_RCC_GetSysClkSource+0x18>)
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	f003 030c 	and.w	r3, r3, #12
}
 800041c:	4618      	mov	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <LL_RCC_SetAHBPrescaler+0x24>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800043c:	4904      	ldr	r1, [pc, #16]	; (8000450 <LL_RCC_SetAHBPrescaler+0x24>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	608b      	str	r3, [r1, #8]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <LL_RCC_SetAPB1Prescaler+0x24>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000464:	4904      	ldr	r1, [pc, #16]	; (8000478 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4313      	orrs	r3, r2
 800046a:	608b      	str	r3, [r1, #8]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800048c:	4904      	ldr	r1, [pc, #16]	; (80004a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	608b      	str	r3, [r1, #8]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000

080004a4 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <LL_RCC_SetRTCClockSource+0x28>)
 80004ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80004b6:	4905      	ldr	r1, [pc, #20]	; (80004cc <LL_RCC_SetRTCClockSource+0x28>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <LL_RCC_EnableRTC+0x20>)
 80004d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <LL_RCC_EnableRTC+0x20>)
 80004dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_RCC_ForceBackupDomainReset+0x20>)
 80004fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000

08000518 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800051e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <LL_RCC_PLL_Enable+0x1c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <LL_RCC_PLL_Enable+0x1c>)
 8000546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <LL_RCC_PLL_IsReady+0x24>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800056c:	d101      	bne.n	8000572 <LL_RCC_PLL_IsReady+0x16>
 800056e:	2301      	movs	r3, #1
 8000570:	e000      	b.n	8000574 <LL_RCC_PLL_IsReady+0x18>
 8000572:	2300      	movs	r3, #0
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000594:	68da      	ldr	r2, [r3, #12]
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000598:	4013      	ands	r3, r2
 800059a:	68f9      	ldr	r1, [r7, #12]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	4311      	orrs	r1, r2
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	0212      	lsls	r2, r2, #8
 80005a4:	4311      	orrs	r1, r2
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	430a      	orrs	r2, r1
 80005aa:	4904      	ldr	r1, [pc, #16]	; (80005bc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80005ac:	4313      	orrs	r3, r2
 80005ae:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000
 80005c0:	f9ff808c 	.word	0xf9ff808c

080005c4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80005ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005d2:	60d3      	str	r3, [r2, #12]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4013      	ands	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <LL_APB1_GRP1_EnableClock+0x2c>)
 800061e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000620:	4907      	ldr	r1, [pc, #28]	; (8000640 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4313      	orrs	r3, r2
 8000626:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_APB1_GRP1_EnableClock+0x2c>)
 800062a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4013      	ands	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	40021000 	.word	0x40021000

08000644 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <LL_APB2_GRP1_EnableClock+0x2c>)
 800064e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4313      	orrs	r3, r2
 8000656:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <LL_APB2_GRP1_EnableClock+0x2c>)
 800065a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4013      	ands	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40021000 	.word	0x40021000

08000674 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <LL_FLASH_SetLatency+0x24>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f023 0207 	bic.w	r2, r3, #7
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <LL_FLASH_SetLatency+0x24>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4313      	orrs	r3, r2
 800068a:	600b      	str	r3, [r1, #0]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	40022000 	.word	0x40022000

0800069c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <LL_FLASH_GetLatency+0x18>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 0307 	and.w	r3, r3, #7
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <LL_EXTI_EnableIT_0_31+0x20>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4904      	ldr	r1, [pc, #16]	; (80006d8 <LL_EXTI_EnableIT_0_31+0x20>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	600b      	str	r3, [r1, #0]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	40010400 	.word	0x40010400

080006dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	4904      	ldr	r1, [pc, #16]	; (80006fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	608b      	str	r3, [r1, #8]

}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40010400 	.word	0x40010400

08000700 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6153      	str	r3, [r2, #20]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40010400 	.word	0x40010400

08000720 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b04      	cmp	r3, #4
 800072c:	d106      	bne.n	800073c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <LL_SYSTICK_SetClkSource+0x34>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <LL_SYSTICK_SetClkSource+0x34>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800073a:	e005      	b.n	8000748 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <LL_SYSTICK_SetClkSource+0x34>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <LL_SYSTICK_SetClkSource+0x34>)
 8000742:	f023 0304 	bic.w	r3, r3, #4
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e010 	.word	0xe000e010

08000758 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <LL_SYSTICK_EnableIT+0x1c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <LL_SYSTICK_EnableIT+0x1c>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e010 	.word	0xe000e010

08000778 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <LL_LPM_EnableSleep+0x1c>)
 800077e:	691b      	ldr	r3, [r3, #16]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <LL_LPM_EnableSleep+0x1c>)
 8000782:	f023 0304 	bic.w	r3, r3, #4
 8000786:	6113      	str	r3, [r2, #16]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <LL_LPM_EnableDeepSleep+0x1c>)
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <LL_LPM_EnableDeepSleep+0x1c>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6113      	str	r3, [r2, #16]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80007c8:	4904      	ldr	r1, [pc, #16]	; (80007dc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	600b      	str	r3, [r1, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40007000 	.word	0x40007000

080007e0 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <LL_PWR_EnableBkUpAccess+0x1c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <LL_PWR_EnableBkUpAccess+0x1c>)
 80007ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40007000 	.word	0x40007000

08000800 <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <LL_PWR_SetPowerMode+0x24>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f023 0207 	bic.w	r2, r3, #7
 8000810:	4904      	ldr	r1, [pc, #16]	; (8000824 <LL_PWR_SetPowerMode+0x24>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	600b      	str	r3, [r1, #0]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	40007000 	.word	0x40007000

08000828 <LL_PWR_EnableInternWU>:
  * @brief  Enable Internal Wake-up line
  * @rmtoll CR3          EIWF          LL_PWR_EnableInternWU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableInternWU(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <LL_PWR_EnableInternWU+0x1c>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <LL_PWR_EnableInternWU+0x1c>)
 8000832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000836:	6093      	str	r3, [r2, #8]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40007000 	.word	0x40007000

08000848 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f04f 32ff 	mov.w	r2, #4294967295
 8000856:	60da      	str	r2, [r3, #12]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	22ca      	movs	r2, #202	; 0xca
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2253      	movs	r2, #83	; 0x53
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <LL_RTC_WAKEUP_Enable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	609a      	str	r2, [r3, #8]
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <LL_RTC_WAKEUP_Disable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Disable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Disable(RTC_TypeDef *RTCx)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	609a      	str	r2, [r3, #8]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f023 0207 	bic.w	r2, r3, #7
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	431a      	orrs	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	609a      	str	r2, [r3, #8]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_RTC_WAKEUP_SetAutoReload>:
  * @param  RTCx RTC Instance
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	0c1b      	lsrs	r3, r3, #16
 8000914:	041b      	lsls	r3, r3, #16
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	431a      	orrs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	615a      	str	r2, [r3, #20]
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 800092a:	b480      	push	{r7}
 800092c:	b087      	sub	sp, #28
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3350      	adds	r3, #80	; 0x50
 800093e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	4413      	add	r3, r2
 8000948:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	bf00      	nop
 8000952:	371c      	adds	r7, #28
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3350      	adds	r3, #80	; 0x50
 800096e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <LL_RTC_ClearFlag_WUT>:
  * @rmtoll ISR          WUTF          LL_RTC_ClearFlag_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f463 6290 	orn	r2, r3, #1152	; 0x480
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60da      	str	r2, [r3, #12]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <LL_RTC_IsActiveFlag_WUTW>:
  * @rmtoll ISR          WUTWF         LL_RTC_IsActiveFlag_WUTW
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	2b04      	cmp	r3, #4
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <LL_RTC_EnableIT_WUT>:
  * @rmtoll RTC_CR          WUTIE         LL_RTC_EnableIT_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	609a      	str	r2, [r3, #8]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	691a      	ldr	r2, [r3, #16]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	4013      	ands	r3, r2
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d101      	bne.n	8000a0e <LL_GPIO_IsInputPinSet+0x1c>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <LL_GPIO_IsInputPinSet+0x1e>
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	619a      	str	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	041a      	lsls	r2, r3, #16
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	400b      	ands	r3, r1
 8000a74:	431a      	orrs	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	619a      	str	r2, [r3, #24]
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <main>:
//expe = 0;
Interruption_Systick = 0;


int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

	// Reset of all peripherals, Initializes the Flash interface and the Systick.
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fdd8 	bl	8000644 <LL_APB2_GRP1_EnableClock>
    //LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f7ff fb97 	bl	80001c8 <__NVIC_SetPriorityGrouping>
    SystemClock_Config();
 8000a9a:	f000 fb33 	bl	8001104 <SystemClock_Config>
    MX_GPIO_Init();
 8000a9e:	f000 fb93 	bl	80011c8 <MX_GPIO_Init>
	//MX_RTC_Init();

  if(LL_RCC_LSE_IsReady() != 0)//démarrage à chaud
 8000aa2:	f7ff fc0f 	bl	80002c4 <LL_RCC_LSE_IsReady>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d02c      	beq.n	8000b06 <main+0x7e>
  {
	  MX_RTC_Init();
 8000aac:	f000 fb70 	bl	8001190 <MX_RTC_Init>

	  	//Configuration RTC
	  	LL_RTC_DisableWriteProtection (RTC);
 8000ab0:	48ba      	ldr	r0, [pc, #744]	; (8000d9c <main+0x314>)
 8000ab2:	f7ff fee4 	bl	800087e <LL_RTC_DisableWriteProtection>
	  	LL_RTC_EnableInitMode(RTC);
 8000ab6:	48b9      	ldr	r0, [pc, #740]	; (8000d9c <main+0x314>)
 8000ab8:	f7ff fec6 	bl	8000848 <LL_RTC_EnableInitMode>

	  	//initialiser l'interface RTC-MPU
	  	LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 8000abc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ac0:	f7ff fda8 	bl	8000614 <LL_APB1_GRP1_EnableClock>
	  	LL_PWR_EnableBkUpAccess();
 8000ac4:	f7ff fe8c 	bl	80007e0 <LL_PWR_EnableBkUpAccess>


	  	LL_RTC_EnableWriteProtection(RTC);
 8000ac8:	48b4      	ldr	r0, [pc, #720]	; (8000d9c <main+0x314>)
 8000aca:	f7ff fecb 	bl	8000864 <LL_RTC_EnableWriteProtection>

	  //if (LL_GPIO_IsInputPinSet(GPIOC,LL_GPIO_PIN_13) == 0)
	  //{//Si on appuie sur le bouton bleu
		  if (expe==8)
 8000ace:	4bb4      	ldr	r3, [pc, #720]	; (8000da0 <main+0x318>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d103      	bne.n	8000ade <main+0x56>
		  {
			expe=1;
 8000ad6:	4bb2      	ldr	r3, [pc, #712]	; (8000da0 <main+0x318>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e00c      	b.n	8000af8 <main+0x70>
		  }
		  else
		  {
			expe = LL_RTC_BAK_GetRegister(RTC,LL_RTC_BKP_DR0); //Incrémentation de expe
 8000ade:	2100      	movs	r1, #0
 8000ae0:	48ae      	ldr	r0, [pc, #696]	; (8000d9c <main+0x314>)
 8000ae2:	f7ff ff3b 	bl	800095c <LL_RTC_BAK_GetRegister>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4bad      	ldr	r3, [pc, #692]	; (8000da0 <main+0x318>)
 8000aec:	601a      	str	r2, [r3, #0]
			expe = expe +1;
 8000aee:	4bac      	ldr	r3, [pc, #688]	; (8000da0 <main+0x318>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	4aaa      	ldr	r2, [pc, #680]	; (8000da0 <main+0x318>)
 8000af6:	6013      	str	r3, [r2, #0]
		  }
		  LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,expe);
 8000af8:	4ba9      	ldr	r3, [pc, #676]	; (8000da0 <main+0x318>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	48a6      	ldr	r0, [pc, #664]	; (8000d9c <main+0x314>)
 8000b02:	f7ff ff12 	bl	800092a <LL_RTC_BAK_SetRegister>
	   // expe = LL_RTC_BAK_GetRegister(RTC,LL_RTC_BKP_DR0);
	  //}
	  //LL_GPIO_SetOutputPin(LED_Verte_GPIO_Port,LED_Verte_Pin);
  }

  if(LL_RCC_LSE_IsReady() == 0)//démarrage à froid
 8000b06:	f7ff fbdd 	bl	80002c4 <LL_RCC_LSE_IsReady>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d133      	bne.n	8000b78 <main+0xf0>
  {
	  MX_RTC_Init();
 8000b10:	f000 fb3e 	bl	8001190 <MX_RTC_Init>
	//Configuration du LSE
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b18:	f7ff fd7c 	bl	8000614 <LL_APB1_GRP1_EnableClock>
	LL_PWR_EnableBkUpAccess();
 8000b1c:	f7ff fe60 	bl	80007e0 <LL_PWR_EnableBkUpAccess>
	LL_RCC_ForceBackupDomainReset();
 8000b20:	f7ff fce8 	bl	80004f4 <LL_RCC_ForceBackupDomainReset>
	LL_RCC_ReleaseBackupDomainReset();
 8000b24:	f7ff fcf8 	bl	8000518 <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_LSE_Enable();
 8000b28:	f7ff fbba 	bl	80002a0 <LL_RCC_LSE_Enable>

	//Configuration RTC
	LL_RTC_DisableWriteProtection (RTC);
 8000b2c:	489b      	ldr	r0, [pc, #620]	; (8000d9c <main+0x314>)
 8000b2e:	f7ff fea6 	bl	800087e <LL_RTC_DisableWriteProtection>
	LL_RTC_EnableInitMode(RTC);
 8000b32:	489a      	ldr	r0, [pc, #616]	; (8000d9c <main+0x314>)
 8000b34:	f7ff fe88 	bl	8000848 <LL_RTC_EnableInitMode>

	//initialiser l'interface RTC-MPU
	LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 8000b38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b3c:	f7ff fd6a 	bl	8000614 <LL_APB1_GRP1_EnableClock>
	LL_PWR_EnableBkUpAccess();
 8000b40:	f7ff fe4e 	bl	80007e0 <LL_PWR_EnableBkUpAccess>

	LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,expe);
 8000b44:	4b96      	ldr	r3, [pc, #600]	; (8000da0 <main+0x318>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4893      	ldr	r0, [pc, #588]	; (8000d9c <main+0x314>)
 8000b4e:	f7ff feec 	bl	800092a <LL_RTC_BAK_SetRegister>

	LL_RTC_EnableWriteProtection(RTC);
 8000b52:	4892      	ldr	r0, [pc, #584]	; (8000d9c <main+0x314>)
 8000b54:	f7ff fe86 	bl	8000864 <LL_RTC_EnableWriteProtection>
	while(LL_RCC_LSE_IsReady() != 1){} //attendre l'initialisation du LSE
 8000b58:	bf00      	nop
 8000b5a:	f7ff fbb3 	bl	80002c4 <LL_RCC_LSE_IsReady>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d1fa      	bne.n	8000b5a <main+0xd2>

	expe = 0;
 8000b64:	4b8e      	ldr	r3, [pc, #568]	; (8000da0 <main+0x318>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
    LL_RTC_BAK_SetRegister(RTC,LL_RTC_BKP_DR0,expe);
 8000b6a:	4b8d      	ldr	r3, [pc, #564]	; (8000da0 <main+0x318>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	488a      	ldr	r0, [pc, #552]	; (8000d9c <main+0x314>)
 8000b74:	f7ff fed9 	bl	800092a <LL_RTC_BAK_SetRegister>
  }

  blue_mode = 0;
 8000b78:	4b8a      	ldr	r3, [pc, #552]	; (8000da4 <main+0x31c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
  int endormi = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
  int periode_LED = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]

  if (expe == 1)
 8000b86:	4b86      	ldr	r3, [pc, #536]	; (8000da0 <main+0x318>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d103      	bne.n	8000b96 <main+0x10e>
  {
	  Config_Experience_1();
 8000b8e:	f000 f9d7 	bl	8000f40 <Config_Experience_1>
	  Systick_Init_Exp1();
 8000b92:	f000 fa29 	bl	8000fe8 <Systick_Init_Exp1>
  }
  if(expe == 2)
 8000b96:	4b82      	ldr	r3, [pc, #520]	; (8000da0 <main+0x318>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d10e      	bne.n	8000bbc <main+0x134>
  {
	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f7ff fd68 	bl	8000674 <LL_FLASH_SetLatency>
	  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1){}
 8000ba4:	bf00      	nop
 8000ba6:	f7ff fd79 	bl	800069c <LL_FLASH_GetLatency>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d1fa      	bne.n	8000ba6 <main+0x11e>
	  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000bb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bb4:	f7ff fe00 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>
	  Systick_Init_24MHz();
 8000bb8:	f000 fa3c 	bl	8001034 <Systick_Init_24MHz>
  }

  if(expe == 3)
 8000bbc:	4b78      	ldr	r3, [pc, #480]	; (8000da0 <main+0x318>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d10e      	bne.n	8000be2 <main+0x15a>
  {
	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f7ff fd55 	bl	8000674 <LL_FLASH_SetLatency>
	  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3){}
 8000bca:	bf00      	nop
 8000bcc:	f7ff fd66 	bl	800069c <LL_FLASH_GetLatency>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d1fa      	bne.n	8000bcc <main+0x144>
	  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000bd6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bda:	f7ff fded 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>
	  Systick_Init_24MHz();
 8000bde:	f000 fa29 	bl	8001034 <Systick_Init_24MHz>
  }

  if(expe == 4)
 8000be2:	4b6f      	ldr	r3, [pc, #444]	; (8000da0 <main+0x318>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d10e      	bne.n	8000c08 <main+0x180>
  {

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000bea:	2003      	movs	r0, #3
 8000bec:	f7ff fd42 	bl	8000674 <LL_FLASH_SetLatency>
	  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3){}
 8000bf0:	bf00      	nop
 8000bf2:	f7ff fd53 	bl	800069c <LL_FLASH_GetLatency>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d1fa      	bne.n	8000bf2 <main+0x16a>
	  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000bfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c00:	f7ff fdda 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>
	  Systick_Init_24MHz();
 8000c04:	f000 fa16 	bl	8001034 <Systick_Init_24MHz>
  }

  if(expe == 5)
 8000c08:	4b65      	ldr	r3, [pc, #404]	; (8000da0 <main+0x318>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b05      	cmp	r3, #5
 8000c0e:	d111      	bne.n	8000c34 <main+0x1ac>
	{

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f7ff fd2f 	bl	8000674 <LL_FLASH_SetLatency>
	  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3){}
 8000c16:	bf00      	nop
 8000c18:	f7ff fd40 	bl	800069c <LL_FLASH_GetLatency>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d1fa      	bne.n	8000c18 <main+0x190>
	  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000c22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c26:	f7ff fdc7 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>

	  LL_RTC_WAKEUP_Enable(RTC); // RTC wake up init
 8000c2a:	485c      	ldr	r0, [pc, #368]	; (8000d9c <main+0x314>)
 8000c2c:	f7ff fe37 	bl	800089e <LL_RTC_WAKEUP_Enable>
	  Systick_Init_24MHz();
 8000c30:	f000 fa00 	bl	8001034 <Systick_Init_24MHz>
	}

  if(expe == 6)
 8000c34:	4b5a      	ldr	r3, [pc, #360]	; (8000da0 <main+0x318>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	d111      	bne.n	8000c60 <main+0x1d8>
	{

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff fd19 	bl	8000674 <LL_FLASH_SetLatency>
	  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3){}
 8000c42:	bf00      	nop
 8000c44:	f7ff fd2a 	bl	800069c <LL_FLASH_GetLatency>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d1fa      	bne.n	8000c44 <main+0x1bc>
	  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000c4e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c52:	f7ff fdb1 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>

	  LL_RTC_WAKEUP_Enable(RTC); // RTC wake up init
 8000c56:	4851      	ldr	r0, [pc, #324]	; (8000d9c <main+0x314>)
 8000c58:	f7ff fe21 	bl	800089e <LL_RTC_WAKEUP_Enable>
	  Systick_Init_24MHz();
 8000c5c:	f000 f9ea 	bl	8001034 <Systick_Init_24MHz>
	}

	if(expe == 7)
 8000c60:	4b4f      	ldr	r3, [pc, #316]	; (8000da0 <main+0x318>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d111      	bne.n	8000c8c <main+0x204>
	{
		LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f7ff fd03 	bl	8000674 <LL_FLASH_SetLatency>
		while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3){}
 8000c6e:	bf00      	nop
 8000c70:	f7ff fd14 	bl	800069c <LL_FLASH_GetLatency>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d1fa      	bne.n	8000c70 <main+0x1e8>
		LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000c7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c7e:	f7ff fd9b 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>

		LL_RTC_WAKEUP_Enable(RTC); // RTC wake up init
 8000c82:	4846      	ldr	r0, [pc, #280]	; (8000d9c <main+0x314>)
 8000c84:	f7ff fe0b 	bl	800089e <LL_RTC_WAKEUP_Enable>
		Systick_Init_24MHz();
 8000c88:	f000 f9d4 	bl	8001034 <Systick_Init_24MHz>
	}

	if(expe == 8)
 8000c8c:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <main+0x318>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b08      	cmp	r3, #8
 8000c92:	d111      	bne.n	8000cb8 <main+0x230>
	{
		LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f7ff fced 	bl	8000674 <LL_FLASH_SetLatency>
		while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3){}
 8000c9a:	bf00      	nop
 8000c9c:	f7ff fcfe 	bl	800069c <LL_FLASH_GetLatency>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d1fa      	bne.n	8000c9c <main+0x214>
		LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000ca6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000caa:	f7ff fd85 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>

		LL_RTC_WAKEUP_Enable(RTC); // RTC wake up init
 8000cae:	483b      	ldr	r0, [pc, #236]	; (8000d9c <main+0x314>)
 8000cb0:	f7ff fdf5 	bl	800089e <LL_RTC_WAKEUP_Enable>
		Systick_Init_24MHz();
 8000cb4:	f000 f9be 	bl	8001034 <Systick_Init_24MHz>
	}

  while(1)
  {
	if(LL_GPIO_IsInputPinSet(GPIOC,LL_GPIO_PIN_13) == 0)
 8000cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbc:	483a      	ldr	r0, [pc, #232]	; (8000da8 <main+0x320>)
 8000cbe:	f7ff fe98 	bl	80009f2 <LL_GPIO_IsInputPinSet>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d104      	bne.n	8000cd2 <main+0x24a>
	{
	  blue_mode = 1;
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <main+0x31c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
	  endormi=1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
	}

	if (expe == 1)
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <main+0x318>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d131      	bne.n	8000d3e <main+0x2b6>
	{
		if(Interruption_Systick == 1)
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <main+0x324>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d126      	bne.n	8000d30 <main+0x2a8>
		{
			periode_LED = periode_LED + 1;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]

			  //Période de la LED : 2s, durée d'impulsion : expe * 50 ms
			  if(periode_LED <= 5*expe)
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <main+0x318>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dc05      	bgt.n	8000d04 <main+0x27c>
			  {
				  LL_GPIO_SetOutputPin(LED_Verte_GPIO_Port,LED_Verte_Pin);
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f7ff fe8d 	bl	8000a1c <LL_GPIO_SetOutputPin>
 8000d02:	e012      	b.n	8000d2a <main+0x2a2>
			  }
			  else if(periode_LED > 5*expe && periode_LED < 20)
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <main+0x318>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dd08      	ble.n	8000d26 <main+0x29e>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2b13      	cmp	r3, #19
 8000d18:	dc05      	bgt.n	8000d26 <main+0x29e>
			  {
				  LL_GPIO_ResetOutputPin(LED_Verte_GPIO_Port,LED_Verte_Pin);
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f7ff fe8a 	bl	8000a38 <LL_GPIO_ResetOutputPin>
 8000d24:	e001      	b.n	8000d2a <main+0x2a2>
			  }
			  else
			  {
				  periode_LED = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
			  }

			  Interruption_Systick = 0;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <main+0x324>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
		}
		if(blue_mode == 1)
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <main+0x31c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d102      	bne.n	8000d3e <main+0x2b6>
		{
		  LL_LPM_EnableSleep();
 8000d38:	f7ff fd1e 	bl	8000778 <LL_LPM_EnableSleep>
		  __WFI();
 8000d3c:	bf30      	wfi
		}
	  }

	  if(expe == 2)
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <main+0x318>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d111      	bne.n	8000d6a <main+0x2e2>
	  {
		  if(Interruption_Systick == 1)
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <main+0x324>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d107      	bne.n	8000d5e <main+0x2d6>
		  {
			  LL_GPIO_TogglePin(Derive_GPIO_Port,Derive_Pin); //Si on ne change pas la période d'interruption du Systick c'est bon
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	4815      	ldr	r0, [pc, #84]	; (8000da8 <main+0x320>)
 8000d54:	f7ff fe7e 	bl	8000a54 <LL_GPIO_TogglePin>
			  Interruption_Systick = 0;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <main+0x324>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if(blue_mode == 1)
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <main+0x31c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <main+0x2e2>
	 	  {
	 		  LL_RCC_MSI_EnablePLLMode();
 8000d66:	f7ff faf5 	bl	8000354 <LL_RCC_MSI_EnablePLLMode>
	 	  }
	  }

	  if(expe == 3)
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <main+0x318>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d13b      	bne.n	8000dea <main+0x362>
	  {
		  //LL_GPIO_SetOutputPin(LED_Verte_GPIO_Port,LED_Verte_Pin);

		  if(Interruption_Systick == 1)
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <main+0x324>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d130      	bne.n	8000ddc <main+0x354>
		  {
			  periode_LED = periode_LED + 1;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	603b      	str	r3, [r7, #0]

			  //Période de la LED : 2s, durée d'impulsion : expe * 50 ms
			  if(periode_LED <= 5*expe)
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <main+0x318>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dc0f      	bgt.n	8000db0 <main+0x328>
			  {
				  LL_GPIO_SetOutputPin(LED_Verte_GPIO_Port,LED_Verte_Pin);
 8000d90:	2120      	movs	r1, #32
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f7ff fe41 	bl	8000a1c <LL_GPIO_SetOutputPin>
 8000d9a:	e01c      	b.n	8000dd6 <main+0x34e>
 8000d9c:	40002800 	.word	0x40002800
 8000da0:	20000024 	.word	0x20000024
 8000da4:	20000028 	.word	0x20000028
 8000da8:	48000800 	.word	0x48000800
 8000dac:	20000020 	.word	0x20000020
			  }
			  else if(periode_LED > 5*expe && periode_LED < 200)
 8000db0:	4b5f      	ldr	r3, [pc, #380]	; (8000f30 <main+0x4a8>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dd08      	ble.n	8000dd2 <main+0x34a>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2bc7      	cmp	r3, #199	; 0xc7
 8000dc4:	dc05      	bgt.n	8000dd2 <main+0x34a>
			  {
				  LL_GPIO_ResetOutputPin(LED_Verte_GPIO_Port,LED_Verte_Pin);
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f7ff fe34 	bl	8000a38 <LL_GPIO_ResetOutputPin>
 8000dd0:	e001      	b.n	8000dd6 <main+0x34e>
			  }
			  else
			  {
				  periode_LED = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
			  }

			  Interruption_Systick = 0;
 8000dd6:	4b57      	ldr	r3, [pc, #348]	; (8000f34 <main+0x4ac>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if(blue_mode == 1)
 8000ddc:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <main+0x4b0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d102      	bne.n	8000dea <main+0x362>
	 	  {
	 		  LL_LPM_EnableSleep();
 8000de4:	f7ff fcc8 	bl	8000778 <LL_LPM_EnableSleep>
	 		  __WFI();
 8000de8:	bf30      	wfi

	 		  //LL_GPIO_ResetOutputPin(LED_Verte_GPIO_Port, LED_Verte_Pin);
	 	  }
	  }

	  if(expe == 4)
 8000dea:	4b51      	ldr	r3, [pc, #324]	; (8000f30 <main+0x4a8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d111      	bne.n	8000e16 <main+0x38e>
	  {

		if(Interruption_Systick == 1)
 8000df2:	4b50      	ldr	r3, [pc, #320]	; (8000f34 <main+0x4ac>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d107      	bne.n	8000e0a <main+0x382>
		{
		  LL_GPIO_TogglePin(Derive_GPIO_Port,Derive_Pin); //Si on ne change pas la période d'interruption du Systick c'est bon
 8000dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfe:	484f      	ldr	r0, [pc, #316]	; (8000f3c <main+0x4b4>)
 8000e00:	f7ff fe28 	bl	8000a54 <LL_GPIO_TogglePin>
		  Interruption_Systick = 0;
 8000e04:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <main+0x4ac>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
		}

		if(blue_mode == 1)
 8000e0a:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <main+0x4b0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d101      	bne.n	8000e16 <main+0x38e>
		{
		  LL_RCC_MSI_EnablePLLMode();
 8000e12:	f7ff fa9f 	bl	8000354 <LL_RCC_MSI_EnablePLLMode>
		}
	  }

	  if (expe == 5)
 8000e16:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <main+0x4a8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d11d      	bne.n	8000e5a <main+0x3d2>
	  {
		if(Interruption_Systick == 1)
 8000e1e:	4b45      	ldr	r3, [pc, #276]	; (8000f34 <main+0x4ac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d107      	bne.n	8000e36 <main+0x3ae>
		{
		  LL_GPIO_TogglePin(Derive_GPIO_Port,Derive_Pin); //Si on ne change pas la période d'interruption du Systick c'est bon
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4844      	ldr	r0, [pc, #272]	; (8000f3c <main+0x4b4>)
 8000e2c:	f7ff fe12 	bl	8000a54 <LL_GPIO_TogglePin>
		  Interruption_Systick = 0;
 8000e30:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <main+0x4ac>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
		}

		if((blue_mode == 1) && (endormi == 1))
 8000e36:	4b40      	ldr	r3, [pc, #256]	; (8000f38 <main+0x4b0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d10d      	bne.n	8000e5a <main+0x3d2>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d10a      	bne.n	8000e5a <main+0x3d2>
		{
			endormi = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
			LL_PWR_SetPowerMode(LL_PWR_MODE_STOP0);//Set Power Mode (stop0)
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff fcd9 	bl	8000800 <LL_PWR_SetPowerMode>
			RTC_wakeup_init_from_stop(20);
 8000e4e:	2014      	movs	r0, #20
 8000e50:	f000 f93e 	bl	80010d0 <RTC_wakeup_init_from_stop>
			LL_LPM_EnableDeepSleep(); // Enable deep sleep
 8000e54:	f7ff fca0 	bl	8000798 <LL_LPM_EnableDeepSleep>
			__WFI();// <3 s'arrête et le µC reprends les instructions */
 8000e58:	bf30      	wfi
		}
	  }
	  if (expe == 6)
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <main+0x4a8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d11d      	bne.n	8000e9e <main+0x416>
	  {
		if(Interruption_Systick == 1)
 8000e62:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <main+0x4ac>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d107      	bne.n	8000e7a <main+0x3f2>
		{
		  LL_GPIO_TogglePin(Derive_GPIO_Port,Derive_Pin); //Si on ne change pas la période d'interruption du Systick c'est bon
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	4833      	ldr	r0, [pc, #204]	; (8000f3c <main+0x4b4>)
 8000e70:	f7ff fdf0 	bl	8000a54 <LL_GPIO_TogglePin>
		  Interruption_Systick = 0;
 8000e74:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <main+0x4ac>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
		}

		if((blue_mode == 1) && (endormi == 1))
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <main+0x4b0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d10d      	bne.n	8000e9e <main+0x416>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d10a      	bne.n	8000e9e <main+0x416>
		{
			endormi = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
			LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);//Set Power Mode (stop0)
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff fcb7 	bl	8000800 <LL_PWR_SetPowerMode>
			RTC_wakeup_init_from_stop(20);
 8000e92:	2014      	movs	r0, #20
 8000e94:	f000 f91c 	bl	80010d0 <RTC_wakeup_init_from_stop>
			LL_LPM_EnableDeepSleep(); // Enable deep sleep
 8000e98:	f7ff fc7e 	bl	8000798 <LL_LPM_EnableDeepSleep>
			__WFI();// <3 s'arrête et le µC reprends les instructions */
 8000e9c:	bf30      	wfi
		}
	  }
	  if (expe == 7)
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <main+0x4a8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	d11d      	bne.n	8000ee2 <main+0x45a>
	  {
		if(Interruption_Systick == 1)
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <main+0x4ac>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d107      	bne.n	8000ebe <main+0x436>
		{
		  LL_GPIO_TogglePin(Derive_GPIO_Port,Derive_Pin); //Si on ne change pas la période d'interruption du Systick c'est bon
 8000eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb2:	4822      	ldr	r0, [pc, #136]	; (8000f3c <main+0x4b4>)
 8000eb4:	f7ff fdce 	bl	8000a54 <LL_GPIO_TogglePin>
		  Interruption_Systick = 0;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <main+0x4ac>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
		}

		if((blue_mode == 1) && (endormi == 1))
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <main+0x4b0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d10d      	bne.n	8000ee2 <main+0x45a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d10a      	bne.n	8000ee2 <main+0x45a>
		{
			endormi = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
			LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);//Set Power Mode (stop0)
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f7ff fc95 	bl	8000800 <LL_PWR_SetPowerMode>
			RTC_wakeup_init_from_stop(20);
 8000ed6:	2014      	movs	r0, #20
 8000ed8:	f000 f8fa 	bl	80010d0 <RTC_wakeup_init_from_stop>
			LL_LPM_EnableDeepSleep(); // Enable deep sleep
 8000edc:	f7ff fc5c 	bl	8000798 <LL_LPM_EnableDeepSleep>
			__WFI();// <3 s'arrête et le µC reprends les instructions */
 8000ee0:	bf30      	wfi

		}
	  }

	  if (expe == 8)
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <main+0x4a8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	f47f aee6 	bne.w	8000cb8 <main+0x230>
	  {
		if(Interruption_Systick == 1)
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <main+0x4ac>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d107      	bne.n	8000f04 <main+0x47c>
		{
		  LL_GPIO_TogglePin(Derive_GPIO_Port,Derive_Pin); //Si on ne change pas la période d'interruption du Systick c'est bon
 8000ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <main+0x4b4>)
 8000efa:	f7ff fdab 	bl	8000a54 <LL_GPIO_TogglePin>
		  Interruption_Systick = 0;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <main+0x4ac>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
		}

		if((blue_mode == 1) && (endormi == 1))
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <main+0x4b0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	f47f aed5 	bne.w	8000cb8 <main+0x230>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	f47f aed1 	bne.w	8000cb8 <main+0x230>
		{
			endormi = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
			LL_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);//Set Power Mode (stop0)
 8000f1a:	2004      	movs	r0, #4
 8000f1c:	f7ff fc70 	bl	8000800 <LL_PWR_SetPowerMode>
			RTC_wakeup_init_from_standby_or_shutdown(10);
 8000f20:	200a      	movs	r0, #10
 8000f22:	f000 f999 	bl	8001258 <RTC_wakeup_init_from_standby_or_shutdown>
			LL_LPM_EnableDeepSleep(); // Enable deep sleep
 8000f26:	f7ff fc37 	bl	8000798 <LL_LPM_EnableDeepSleep>
			__WFI();// <3 s'arrête et le µC reprends les instructions */
 8000f2a:	bf30      	wfi
	if(LL_GPIO_IsInputPinSet(GPIOC,LL_GPIO_PIN_13) == 0)
 8000f2c:	e6c4      	b.n	8000cb8 <main+0x230>
 8000f2e:	bf00      	nop
 8000f30:	20000024 	.word	0x20000024
 8000f34:	20000020 	.word	0x20000020
 8000f38:	20000028 	.word	0x20000028
 8000f3c:	48000800 	.word	0x48000800

08000f40 <Config_Experience_1>:
	  }
  }
}

void Config_Experience_1(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000f44:	2004      	movs	r0, #4
 8000f46:	f7ff fb95 	bl	8000674 <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff fba6 	bl	800069c <LL_FLASH_GetLatency>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d1fa      	bne.n	8000f4c <Config_Experience_1+0xc>
	{
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000f56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f5a:	f7ff fc2d 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_MSI_Enable();
 8000f5e:	f7ff f9d7 	bl	8000310 <LL_RCC_MSI_Enable>

	 /* Wait till MSI is ready */
	while(LL_RCC_MSI_IsReady() != 1)
 8000f62:	bf00      	nop
 8000f64:	f7ff f9e4 	bl	8000330 <LL_RCC_MSI_IsReady>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d1fa      	bne.n	8000f64 <Config_Experience_1+0x24>
	{

	}
	LL_RCC_MSI_EnableRangeSelection();
 8000f6e:	f7ff fa01 	bl	8000374 <LL_RCC_MSI_EnableRangeSelection>
	LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000f72:	2060      	movs	r0, #96	; 0x60
 8000f74:	f7ff fa0e 	bl	8000394 <LL_RCC_MSI_SetRange>
	LL_RCC_MSI_SetCalibTrimming(0);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff fa1f 	bl	80003bc <LL_RCC_MSI_SetCalibTrimming>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2228      	movs	r2, #40	; 0x28
 8000f82:	2100      	movs	r1, #0
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fafd 	bl	8000584 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_EnableDomain_SYS();
 8000f8a:	f7ff fb1b 	bl	80005c4 <LL_RCC_PLL_EnableDomain_SYS>
	LL_RCC_PLL_Enable();
 8000f8e:	f7ff fad5 	bl	800053c <LL_RCC_PLL_Enable>

	 /* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1)
 8000f92:	bf00      	nop
 8000f94:	f7ff fae2 	bl	800055c <LL_RCC_PLL_IsReady>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d1fa      	bne.n	8000f94 <Config_Experience_1+0x54>
	{

	}
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f7ff fa22 	bl	80003e8 <LL_RCC_SetSysClkSource>

	 /* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000fa4:	bf00      	nop
 8000fa6:	f7ff fa33 	bl	8000410 <LL_RCC_GetSysClkSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b0c      	cmp	r3, #12
 8000fae:	d1fa      	bne.n	8000fa6 <Config_Experience_1+0x66>
	{

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fa3b 	bl	800042c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fa4c 	bl	8000454 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fa5d 	bl	800047c <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(80000000);
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <Config_Experience_1+0x94>)
 8000fc4:	f000 fcc2 	bl	800194c <LL_Init1msTick>

	LL_SetSystemCoreClock(80000000);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <Config_Experience_1+0x94>)
 8000fca:	f000 fccd 	bl	8001968 <LL_SetSystemCoreClock>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	04c4b400 	.word	0x04c4b400

08000fd8 <RTC_WKUP_IRQHandler>:

// wakeup timer interrupt Handler (inutile mais doit etre defini)
void RTC_WKUP_IRQHandler()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_20 );
 8000fdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000fe0:	f7ff fb8e 	bl	8000700 <LL_EXTI_ClearFlag_0_31>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Systick_Init_Exp1>:

void Systick_Init_Exp1(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	//Configuration du Systick pour avoir des interruptions toutes les 10ms
	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000fec:	2004      	movs	r0, #4
 8000fee:	f7ff fb97 	bl	8000720 <LL_SYSTICK_SetClkSource>
	LL_SYSTICK_EnableIT();
 8000ff2:	f7ff fbb1 	bl	8000758 <LL_SYSTICK_EnableIT>
	SysTick->LOAD=SystemCoreClock/10;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <Systick_Init_Exp1+0x40>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <Systick_Init_Exp1+0x44>)
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <Systick_Init_Exp1+0x48>)
 8000ffe:	fba1 1303 	umull	r1, r3, r1, r3
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <Systick_Init_Exp1+0x44>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
	NVIC_SetPriority(SysTick_IRQn,7);
 800100c:	2107      	movs	r1, #7
 800100e:	f04f 30ff 	mov.w	r0, #4294967295
 8001012:	f7ff f91b 	bl	800024c <__NVIC_SetPriority>
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk|SysTick_CTRL_ENABLE_Msk;
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <Systick_Init_Exp1+0x44>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <Systick_Init_Exp1+0x44>)
 800101c:	f043 0303 	orr.w	r3, r3, #3
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000000 	.word	0x20000000
 800102c:	e000e010 	.word	0xe000e010
 8001030:	cccccccd 	.word	0xcccccccd

08001034 <Systick_Init_24MHz>:


void Systick_Init_24MHz(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff fb1b 	bl	8000674 <LL_FLASH_SetLatency>

	  //Configuration du Systick pour avoir des interruptions toutes les 10ms
	  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800103e:	2004      	movs	r0, #4
 8001040:	f7ff fb6e 	bl	8000720 <LL_SYSTICK_SetClkSource>
	  LL_SYSTICK_EnableIT();
 8001044:	f7ff fb88 	bl	8000758 <LL_SYSTICK_EnableIT>
	  SysTick->LOAD=240000-1;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <Systick_Init_24MHz+0x3c>)
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <Systick_Init_24MHz+0x40>)
 800104c:	605a      	str	r2, [r3, #4]
	  SysTick->VAL=0;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <Systick_Init_24MHz+0x3c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
	  NVIC_SetPriority(SysTick_IRQn,7);
 8001054:	2107      	movs	r1, #7
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	f7ff f8f7 	bl	800024c <__NVIC_SetPriority>
	  SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk|SysTick_CTRL_ENABLE_Msk;
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <Systick_Init_24MHz+0x3c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a03      	ldr	r2, [pc, #12]	; (8001070 <Systick_Init_24MHz+0x3c>)
 8001064:	f043 0303 	orr.w	r3, r3, #3
 8001068:	6013      	str	r3, [r2, #0]
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010
 8001074:	0003a97f 	.word	0x0003a97f

08001078 <RTC_wakeup_init>:

// partie commune a toutes les utilisations du wakeup timer
static void RTC_wakeup_init( int delay )
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection( RTC );
 8001080:	4812      	ldr	r0, [pc, #72]	; (80010cc <RTC_wakeup_init+0x54>)
 8001082:	f7ff fbfc 	bl	800087e <LL_RTC_DisableWriteProtection>
	LL_RTC_WAKEUP_Disable( RTC );
 8001086:	4811      	ldr	r0, [pc, #68]	; (80010cc <RTC_wakeup_init+0x54>)
 8001088:	f7ff fc19 	bl	80008be <LL_RTC_WAKEUP_Disable>
	while	( !LL_RTC_IsActiveFlag_WUTW( RTC ) )
 800108c:	bf00      	nop
 800108e:	480f      	ldr	r0, [pc, #60]	; (80010cc <RTC_wakeup_init+0x54>)
 8001090:	f7ff fc8c 	bl	80009ac <LL_RTC_IsActiveFlag_WUTW>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f9      	beq.n	800108e <RTC_wakeup_init+0x16>
		{ }
	// connecter le timer a l'horloge 1Hz de la RTC
	LL_RTC_WAKEUP_SetClock( RTC, LL_RTC_WAKEUPCLOCK_CKSPRE );
 800109a:	2104      	movs	r1, #4
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <RTC_wakeup_init+0x54>)
 800109e:	f7ff fc1e 	bl	80008de <LL_RTC_WAKEUP_SetClock>
	// fixer la duree de temporisation
	LL_RTC_WAKEUP_SetAutoReload( RTC, delay );	// 16 bits
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4619      	mov	r1, r3
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <RTC_wakeup_init+0x54>)
 80010a8:	f7ff fc2c 	bl	8000904 <LL_RTC_WAKEUP_SetAutoReload>
	LL_RTC_ClearFlag_WUT(RTC);
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <RTC_wakeup_init+0x54>)
 80010ae:	f7ff fc6c 	bl	800098a <LL_RTC_ClearFlag_WUT>
	LL_RTC_EnableIT_WUT(RTC);
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <RTC_wakeup_init+0x54>)
 80010b4:	f7ff fc8d 	bl	80009d2 <LL_RTC_EnableIT_WUT>
	LL_RTC_WAKEUP_Enable(RTC);
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <RTC_wakeup_init+0x54>)
 80010ba:	f7ff fbf0 	bl	800089e <LL_RTC_WAKEUP_Enable>
	LL_RTC_EnableWriteProtection(RTC);
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <RTC_wakeup_init+0x54>)
 80010c0:	f7ff fbd0 	bl	8000864 <LL_RTC_EnableWriteProtection>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40002800 	.word	0x40002800

080010d0 <RTC_wakeup_init_from_stop>:

void RTC_wakeup_init_from_stop( int delay )
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	RTC_wakeup_init( delay );
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ffcd 	bl	8001078 <RTC_wakeup_init>
	// valider l'interrupt par la ligne 20 du module EXTI, qui est réservée au wakeup timer
	LL_EXTI_EnableIT_0_31( LL_EXTI_LINE_20 );
 80010de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010e2:	f7ff fae9 	bl	80006b8 <LL_EXTI_EnableIT_0_31>
	LL_EXTI_EnableRisingTrig_0_31( LL_EXTI_LINE_20 );
 80010e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010ea:	f7ff faf7 	bl	80006dc <LL_EXTI_EnableRisingTrig_0_31>
	// valider l'interrupt chez NVIC
	NVIC_SetPriority( RTC_WKUP_IRQn, 1 );
 80010ee:	2101      	movs	r1, #1
 80010f0:	2003      	movs	r0, #3
 80010f2:	f7ff f8ab 	bl	800024c <__NVIC_SetPriority>
	NVIC_EnableIRQ( RTC_WKUP_IRQn );
 80010f6:	2003      	movs	r0, #3
 80010f8:	f7ff f88a 	bl	8000210 <__NVIC_EnableIRQ>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff fab3 	bl	8000674 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800110e:	bf00      	nop
 8001110:	f7ff fac4 	bl	800069c <LL_FLASH_GetLatency>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d1fa      	bne.n	8001110 <SystemClock_Config+0xc>
  while(LL_RCC_LSI_IsReady() != 1)
    {

    }*/

  LL_RCC_LSI_Enable();
 800111a:	f7ff f8e7 	bl	80002ec <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */

  LL_RCC_MSI_Enable();
 800111e:	f7ff f8f7 	bl	8000310 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001122:	bf00      	nop
 8001124:	f7ff f904 	bl	8000330 <LL_RCC_MSI_IsReady>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	d1fa      	bne.n	8001124 <SystemClock_Config+0x20>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800112e:	f7ff f921 	bl	8000374 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 8001132:	2090      	movs	r0, #144	; 0x90
 8001134:	f7ff f92e 	bl	8000394 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff f93f 	bl	80003bc <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 800113e:	f7ff fb4f 	bl	80007e0 <LL_PWR_EnableBkUpAccess>
  LL_RCC_ForceBackupDomainReset();
 8001142:	f7ff f9d7 	bl	80004f4 <LL_RCC_ForceBackupDomainReset>
  LL_RCC_ReleaseBackupDomainReset();
 8001146:	f7ff f9e7 	bl	8000518 <LL_RCC_ReleaseBackupDomainReset>
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 800114a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800114e:	f7ff f9a9 	bl	80004a4 <LL_RCC_SetRTCClockSource>
  LL_RCC_EnableRTC();
 8001152:	f7ff f9bd 	bl	80004d0 <LL_RCC_EnableRTC>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff f946 	bl	80003e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 800115c:	bf00      	nop
 800115e:	f7ff f957 	bl	8000410 <LL_RCC_GetSysClkSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1fa      	bne.n	800115e <SystemClock_Config+0x5a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff f95f 	bl	800042c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff f970 	bl	8000454 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff f981 	bl	800047c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(24000000);
 800117a:	4804      	ldr	r0, [pc, #16]	; (800118c <SystemClock_Config+0x88>)
 800117c:	f000 fbe6 	bl	800194c <LL_Init1msTick>

  LL_SetSystemCoreClock(24000000);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <SystemClock_Config+0x88>)
 8001182:	f000 fbf1 	bl	8001968 <LL_SetSystemCoreClock>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	016e3600 	.word	0x016e3600

08001190 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 80011a0:	f7ff f996 	bl	80004d0 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
  RTC_InitStruct.AsynchPrescaler = 127;
 80011a8:	237f      	movs	r3, #127	; 0x7f
 80011aa:	60bb      	str	r3, [r7, #8]
  RTC_InitStruct.SynchPrescaler = 255;
 80011ac:	23ff      	movs	r3, #255	; 0xff
 80011ae:	60fb      	str	r3, [r7, #12]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <MX_RTC_Init+0x34>)
 80011b6:	f000 fb4d 	bl	8001854 <LL_RTC_Init>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40002800 	.word	0x40002800

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	463b      	mov	r3, r7
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80011de:	2004      	movs	r0, #4
 80011e0:	f7ff fa00 	bl	80005e4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff f9fd 	bl	80005e4 <LL_AHB2_GRP1_EnableClock>

  /**/

  /**/
  LL_GPIO_ResetOutputPin(Derive_GPIO_Port, Derive_Pin);
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <MX_GPIO_Init+0x8c>)
 80011f0:	f7ff fc22 	bl	8000a38 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Bouton_bleu_Pin;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Bouton_bleu_GPIO_Port, &GPIO_InitStruct);
 8001202:	463b      	mov	r3, r7
 8001204:	4619      	mov	r1, r3
 8001206:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_GPIO_Init+0x8c>)
 8001208:	f000 fa12 	bl	8001630 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Verte_Pin;
 800120c:	2320      	movs	r3, #32
 800120e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001210:	2301      	movs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_Verte_GPIO_Port, &GPIO_InitStruct);
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001228:	f000 fa02 	bl	8001630 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Derive_Pin;
 800122c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001230:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Derive_GPIO_Port, &GPIO_InitStruct);
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <MX_GPIO_Init+0x8c>)
 8001248:	f000 f9f2 	bl	8001630 <LL_GPIO_Init>

}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000800 	.word	0x48000800

08001258 <RTC_wakeup_init_from_standby_or_shutdown>:

// Dans le cas des modes STANDBY et SHUTDOWN, le MPU sera reveille par reset
// causé par 1 wakeup line (interne ou externe) (le NVIC n'est plus alimenté)
void RTC_wakeup_init_from_standby_or_shutdown( int delay )
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
RTC_wakeup_init( delay );
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff09 	bl	8001078 <RTC_wakeup_init>
// enable the Internal Wake-up line
LL_PWR_EnableInternWU();	// ceci ne concerne que Standby et Shutdown, pas STOPx
 8001266:	f7ff fadf 	bl	8000828 <LL_PWR_EnableInternWU>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <HardFault_Handler+0x4>

08001286 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <BusFault_Handler+0x4>

08001292 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <UsageFault_Handler+0x4>

08001298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	Interruption_Systick = 1;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <SysTick_Handler+0x14>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	20000020 	.word	0x20000020

080012dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <SystemInit+0x64>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <SystemInit+0x64>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <SystemInit+0x68>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <SystemInit+0x68>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <SystemInit+0x68>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <SystemInit+0x68>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <SystemInit+0x68>)
 8001308:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800130c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001310:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <SystemInit+0x68>)
 8001314:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001318:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <SystemInit+0x68>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <SystemInit+0x68>)
 8001320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001324:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <SystemInit+0x68>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SystemInit+0x64>)
 800132e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001332:	609a      	str	r2, [r3, #8]
#endif
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	40021000 	.word	0x40021000

08001348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800134c:	f7ff ffc6 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001350:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001352:	e003      	b.n	800135c <LoopCopyDataInit>

08001354 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001356:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001358:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800135a:	3104      	adds	r1, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800135c:	480a      	ldr	r0, [pc, #40]	; (8001388 <LoopForever+0xa>)
	ldr	r3, =_edata
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001360:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001362:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001364:	d3f6      	bcc.n	8001354 <CopyDataInit>
	ldr	r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001368:	e002      	b.n	8001370 <LoopFillZerobss>

0800136a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800136a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800136c:	f842 3b04 	str.w	r3, [r2], #4

08001370 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <LoopForever+0x16>)
	cmp	r2, r3
 8001372:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001374:	d3f9      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f000 fb07 	bl	8001988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137a:	f7ff fb85 	bl	8000a88 <main>

0800137e <LoopForever>:

LoopForever:
    b LoopForever
 800137e:	e7fe      	b.n	800137e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001380:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001384:	080019f0 	.word	0x080019f0
	ldr	r0, =_sdata
 8001388:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800138c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001390:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001394:	2000002c 	.word	0x2000002c

08001398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>

0800139a <LL_GPIO_SetPinMode>:
{
 800139a:	b480      	push	{r7}
 800139c:	b08b      	sub	sp, #44	; 0x2c
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80013c0:	2320      	movs	r3, #32
 80013c2:	e003      	b.n	80013cc <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2103      	movs	r1, #3
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	401a      	ands	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	61fb      	str	r3, [r7, #28]
  return result;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80013ee:	2320      	movs	r3, #32
 80013f0:	e003      	b.n	80013fa <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	431a      	orrs	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	601a      	str	r2, [r3, #0]
}
 8001408:	bf00      	nop
 800140a:	372c      	adds	r7, #44	; 0x2c
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_GPIO_SetPinOutputType>:
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	43db      	mvns	r3, r3
 8001428:	401a      	ands	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	431a      	orrs	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	605a      	str	r2, [r3, #4]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_GPIO_SetPinSpeed>:
{
 8001444:	b480      	push	{r7}
 8001446:	b08b      	sub	sp, #44	; 0x2c
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	613b      	str	r3, [r7, #16]
  return result;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800146a:	2320      	movs	r3, #32
 800146c:	e003      	b.n	8001476 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2103      	movs	r1, #3
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	401a      	ands	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	61fb      	str	r3, [r7, #28]
  return result;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001498:	2320      	movs	r3, #32
 800149a:	e003      	b.n	80014a4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	431a      	orrs	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	609a      	str	r2, [r3, #8]
}
 80014b2:	bf00      	nop
 80014b4:	372c      	adds	r7, #44	; 0x2c
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_GPIO_SetPinPull>:
{
 80014be:	b480      	push	{r7}
 80014c0:	b08b      	sub	sp, #44	; 0x2c
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	613b      	str	r3, [r7, #16]
  return result;
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80014e4:	2320      	movs	r3, #32
 80014e6:	e003      	b.n	80014f0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2103      	movs	r1, #3
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	61fb      	str	r3, [r7, #28]
  return result;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001512:	2320      	movs	r3, #32
 8001514:	e003      	b.n	800151e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	431a      	orrs	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	60da      	str	r2, [r3, #12]
}
 800152c:	bf00      	nop
 800152e:	372c      	adds	r7, #44	; 0x2c
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_GPIO_SetAFPin_0_7>:
{
 8001538:	b480      	push	{r7}
 800153a:	b08b      	sub	sp, #44	; 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a1a      	ldr	r2, [r3, #32]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa93 f3a3 	rbit	r3, r3
 8001552:	613b      	str	r3, [r7, #16]
  return result;
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800155e:	2320      	movs	r3, #32
 8001560:	e003      	b.n	800156a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	210f      	movs	r1, #15
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	401a      	ands	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	61fb      	str	r3, [r7, #28]
  return result;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800158c:	2320      	movs	r3, #32
 800158e:	e003      	b.n	8001598 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	621a      	str	r2, [r3, #32]
}
 80015a6:	bf00      	nop
 80015a8:	372c      	adds	r7, #44	; 0x2c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_GPIO_SetAFPin_8_15>:
{
 80015b2:	b480      	push	{r7}
 80015b4:	b08b      	sub	sp, #44	; 0x2c
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	613b      	str	r3, [r7, #16]
  return result;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80015da:	2320      	movs	r3, #32
 80015dc:	e003      	b.n	80015e6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	210f      	movs	r1, #15
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	401a      	ands	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	61fb      	str	r3, [r7, #28]
  return result;
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800160a:	2320      	movs	r3, #32
 800160c:	e003      	b.n	8001616 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	431a      	orrs	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001624:	bf00      	nop
 8001626:	372c      	adds	r7, #44	; 0x2c
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	60fb      	str	r3, [r7, #12]
  return result;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <LL_GPIO_Init+0x26>
    return 32U;
 8001652:	2320      	movs	r3, #32
 8001654:	e003      	b.n	800165e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fab3 f383 	clz	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001660:	e040      	b.n	80016e4 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2101      	movs	r1, #1
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d032      	beq.n	80016de <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	461a      	mov	r2, r3
 800167e:	69b9      	ldr	r1, [r7, #24]
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fe8a 	bl	800139a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d003      	beq.n	8001696 <LL_GPIO_Init+0x66>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d106      	bne.n	80016a4 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	461a      	mov	r2, r3
 800169c:	69b9      	ldr	r1, [r7, #24]
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fed0 	bl	8001444 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	461a      	mov	r2, r3
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff06 	bl	80014be <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d111      	bne.n	80016de <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2bff      	cmp	r3, #255	; 0xff
 80016be:	d807      	bhi.n	80016d0 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	461a      	mov	r2, r3
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff35 	bl	8001538 <LL_GPIO_SetAFPin_0_7>
 80016ce:	e006      	b.n	80016de <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	461a      	mov	r2, r3
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff6a 	bl	80015b2 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1b7      	bne.n	8001662 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d003      	beq.n	8001702 <LL_GPIO_Init+0xd2>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d107      	bne.n	8001712 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	461a      	mov	r2, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fe81 	bl	8001414 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <LL_RTC_SetHourFormat>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	609a      	str	r2, [r3, #8]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_RTC_EnableInitMode>:
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	60da      	str	r2, [r3, #12]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_RTC_DisableInitMode>:
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800176c:	60da      	str	r2, [r3, #12]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_RTC_SetAsynchPrescaler>:
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	041b      	lsls	r3, r3, #16
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	611a      	str	r2, [r3, #16]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_RTC_SetSynchPrescaler>:
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	611a      	str	r2, [r3, #16]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_RTC_EnableWriteProtection>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_RTC_DisableWriteProtection>:
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	22ca      	movs	r2, #202	; 0xca
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2253      	movs	r2, #83	; 0x53
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_RTC_IsActiveFlag_INIT>:
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001816:	2b40      	cmp	r3, #64	; 0x40
 8001818:	bf0c      	ite	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	2300      	movne	r3, #0
 800181e:	b2db      	uxtb	r3, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_SYSTICK_IsActiveCounterFlag>:
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	bf0c      	ite	eq
 800183e:	2301      	moveq	r3, #1
 8001840:	2300      	movne	r3, #0
 8001842:	b2db      	uxtb	r3, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffbf 	bl	80017e6 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f822 	bl	80018b2 <LL_RTC_EnterInitMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b01      	cmp	r3, #1
 8001872:	d016      	beq.n	80018a2 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff4e 	bl	800171c <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff8b 	bl	80017a2 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff71 	bl	800177a <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff60 	bl	800175e <LL_RTC_DisableInitMode>

    status = SUCCESS;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff92 	bl	80017cc <LL_RTC_EnableWriteProtection>

  return status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff9e 	bl	8001806 <LL_RTC_IsActiveFlag_INIT>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11e      	bne.n	800190e <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff36 	bl	8001742 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ff95 	bl	8001806 <LL_RTC_IsActiveFlag_INIT>
 80018dc:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80018de:	e010      	b.n	8001902 <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80018e0:	f7ff ffa4 	bl	800182c <LL_SYSTICK_IsActiveCounterFlag>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff88 	bl	8001806 <LL_RTC_IsActiveFlag_INIT>
 80018f6:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <LL_RTC_EnterInitMode+0x5c>
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d1e8      	bne.n	80018e0 <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 800190e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <LL_InitTick+0x30>)
 800192c:	3b01      	subs	r3, #1
 800192e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <LL_InitTick+0x30>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <LL_InitTick+0x30>)
 8001938:	2205      	movs	r2, #5
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e010 	.word	0xe000e010

0800194c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001954:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ffdd 	bl	8001918 <LL_InitTick>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <LL_SetSystemCoreClock+0x1c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000

08001988 <__libc_init_array>:
 8001988:	b570      	push	{r4, r5, r6, lr}
 800198a:	4e0d      	ldr	r6, [pc, #52]	; (80019c0 <__libc_init_array+0x38>)
 800198c:	4c0d      	ldr	r4, [pc, #52]	; (80019c4 <__libc_init_array+0x3c>)
 800198e:	1ba4      	subs	r4, r4, r6
 8001990:	10a4      	asrs	r4, r4, #2
 8001992:	2500      	movs	r5, #0
 8001994:	42a5      	cmp	r5, r4
 8001996:	d109      	bne.n	80019ac <__libc_init_array+0x24>
 8001998:	4e0b      	ldr	r6, [pc, #44]	; (80019c8 <__libc_init_array+0x40>)
 800199a:	4c0c      	ldr	r4, [pc, #48]	; (80019cc <__libc_init_array+0x44>)
 800199c:	f000 f818 	bl	80019d0 <_init>
 80019a0:	1ba4      	subs	r4, r4, r6
 80019a2:	10a4      	asrs	r4, r4, #2
 80019a4:	2500      	movs	r5, #0
 80019a6:	42a5      	cmp	r5, r4
 80019a8:	d105      	bne.n	80019b6 <__libc_init_array+0x2e>
 80019aa:	bd70      	pop	{r4, r5, r6, pc}
 80019ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019b0:	4798      	blx	r3
 80019b2:	3501      	adds	r5, #1
 80019b4:	e7ee      	b.n	8001994 <__libc_init_array+0xc>
 80019b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ba:	4798      	blx	r3
 80019bc:	3501      	adds	r5, #1
 80019be:	e7f2      	b.n	80019a6 <__libc_init_array+0x1e>
 80019c0:	080019e8 	.word	0x080019e8
 80019c4:	080019e8 	.word	0x080019e8
 80019c8:	080019e8 	.word	0x080019e8
 80019cc:	080019ec 	.word	0x080019ec

080019d0 <_init>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	bf00      	nop
 80019d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d6:	bc08      	pop	{r3}
 80019d8:	469e      	mov	lr, r3
 80019da:	4770      	bx	lr

080019dc <_fini>:
 80019dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019de:	bf00      	nop
 80019e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019e2:	bc08      	pop	{r3}
 80019e4:	469e      	mov	lr, r3
 80019e6:	4770      	bx	lr
